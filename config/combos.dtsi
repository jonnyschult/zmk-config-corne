#define COMBO_TERM_FAST   18
#define COMBO_TERM_SLOW   50
#define COMBO_TERM_SLOWER 100
#define COMBO_PRIOR_IDLE  150


// sourced from urob/zmk-node-free
// if called with 4 args from zmk_combo, then
//   5 is combo_6, 6 is combo_5 and FUNC is combo_4
// if called with 5 args from zmk_combo, then
//   6 is combo_5, FUNC is combo_5, and combo_4 is in the '...'
// if called with 6 args from zmk_combo, then
//   FUNC is combo_6, and combo_4 and combo_5 are in the '...'
// the macro is replaced with FUNC
#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, _6, FUNC, ...) FUNC

#define ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, prior_idle) \
  / { \
    combos { \
      compatible = "zmk,combos"; \
      combo_ ## name { \
        bindings = <combo_bindings>; \
        key-positions = <keypos>; \
        layers = <combo_layers>; \
        timeout-ms = <combo_timeout>; \
        require-prior-idle-ms = <prior_idle>; \
      }; \
    }; \
  };

#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM_SLOW, COMBO_PRIOR_IDLE)

#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, COMBO_PRIOR_IDLE)

// var args gets spread here so the macro will be called with
// 4, 5 or 6 args plus the funcs, so 5 6 or 7 args total
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_6_ARGS, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)

/*
  ╭───────────────────────┬───────────────────────╮
  │                       |                       │
  │      LM3 LM2 LM1 TK3  |  RM1 RM2 RM3 RM4      │
  │                       │                       │
  ╰───────────╮       LH0 │ RK1       ╭───────────╯
              ╰───────────┴───────────╯    
*/

/***********************************************
*               ALPHA LAYER COMBOS             *
************************************************/

// ZMK_COMBO(chord_a, &kp A, LII, ALPHA) // 'a' - Only RMI key needed
ZMK_COMBO(chord_b, &kp B, LII RII RMI, ALPHA)
ZMK_COMBO(chord_c, &kp C, LMI RII, ALPHA)
ZMK_COMBO(chord_d, &kp D, LII LMI, ALPHA)
// ZMK_COMBO(chord_e, &kp E, RII, ALPHA) // 'e' - Only ROI key needed
ZMK_COMBO(chord_f, &kp F, LII LMI RII, ALPHA)
ZMK_COMBO(chord_g, &kp G, LMI ROI, ALPHA)
ZMK_COMBO(chord_h, &kp H, LOI RMI, ALPHA)
// ZMK_COMBO(chord_i, &kp I, RMI, ALPHA) // 'i' - Only LMI key needed
ZMK_COMBO(chord_j, &kp J, LOI RII RMI, ALPHA)
ZMK_COMBO(chord_k, &kp K, ROI RMI RII, ALPHA)
ZMK_COMBO(chord_l, &kp L, LII RMI, ALPHA) 
ZMK_COMBO(chord_m, &kp M, LOI RII, ALPHA)
ZMK_COMBO(chord_n, &kp N, LMI RMI, ALPHA)
// ZMK_COMBO(chord_o, &kp O, LMI, ALPHA) // 'o' - Only LII key needed
ZMK_COMBO(chord_p, &kp P, LOI ROI, ALPHA)
ZMK_COMBO(chord_q, &kp Q, LII LMI ROI, ALPHA)
ZMK_COMBO(chord_r, &kp R, LMI RII RMI, ALPHA) 
ZMK_COMBO(chord_s, &kp S, LII RII, ALPHA) 
ZMK_COMBO(chord_t, &kp T, RII RMI, ALPHA)
// ZMK_COMBO(chord_u, &kp U, LMI, ALPHA) // 'u' - Only LMI key needed
ZMK_COMBO(chord_v, &kp V, LMI RII ROI, ALPHA)
ZMK_COMBO(chord_w, &kp W, LII LMI RMI, ALPHA)
ZMK_COMBO(chord_x, &kp X, RMI ROI, ALPHA)
// ZMK_COMBO(chord_y, &kp Y, ROI, ALPHA) // 'y' - Only ROI key needed
ZMK_COMBO(chord_z, &kp Z, LMI LOI, ALPHA)

/***************  SHIFTED  ********************/

ZMK_COMBO(chord_a, &kp A, LSH LII, ALPHA)
ZMK_COMBO(chord_b, &kp B, LSH LII RII RMI, ALPHA)
ZMK_COMBO(chord_c, &kp C, LSH LMI RII, ALPHA)
ZMK_COMBO(chord_d, &kp D, LSH LII LMI, ALPHA)
ZMK_COMBO(chord_e, &kp E, LSH RII, ALPHA)
ZMK_COMBO(chord_f, &kp F, LSH LII LMI RII, ALPHA)
ZMK_COMBO(chord_g, &kp G, LSH LMI ROI, ALPHA)
ZMK_COMBO(chord_h, &kp H, LSH LOI RMI, ALPHA)
ZMK_COMBO(chord_i, &kp I, LSH RMI, ALPHA)
ZMK_COMBO(chord_j, &kp J, LSH LOI RII RMI, ALPHA)
ZMK_COMBO(chord_k, &kp K, LSH ROI RMI RII, ALPHA)
ZMK_COMBO(chord_l, &kp L, LSH LII RMI, ALPHA) 
ZMK_COMBO(chord_m, &kp M, LSH LOI RII, ALPHA)
ZMK_COMBO(chord_n, &kp N, LSH LMI RMI, ALPHA)
ZMK_COMBO(chord_o, &kp O, LSH LMI, ALPHA)
ZMK_COMBO(chord_p, &kp P, LSH LOI ROI, ALPHA)
ZMK_COMBO(chord_q, &kp Q, LSH LII LMI ROI, ALPHA)
ZMK_COMBO(chord_r, &kp R, LSH LMI RII RMI, ALPHA) 
ZMK_COMBO(chord_s, &kp S, LSH LII RII, ALPHA) 
ZMK_COMBO(chord_t, &kp T, LSH RII RMI, ALPHA)
ZMK_COMBO(chord_u, &kp U, LSH LMI, ALPHA)
ZMK_COMBO(chord_v, &kp V, LSH LMI RII ROI, ALPHA)
ZMK_COMBO(chord_w, &kp W, LSH LII LMI RMI, ALPHA)
ZMK_COMBO(chord_x, &kp X, LSH RMI ROI, ALPHA)
ZMK_COMBO(chord_y, &kp Y, LSH ROI, ALPHA)
ZMK_COMBO(chord_z, &kp Z, LSH LMI LOI, ALPHA)
