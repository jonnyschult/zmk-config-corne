#define COMBO_TERM_FAST   18
#define COMBO_TERM_SLOW   50
#define COMBO_TERM_SLOWER 100
#define COMBO_PRIOR_IDLE  150


// sourced from urob/zmk-node-free
// if called with 4 args from zmk_combo, then
//   5 is combo_6, 6 is combo_5 and FUNC is combo_4
// if called with 5 args from zmk_combo, then
//   6 is combo_5, FUNC is combo_5, and combo_4 is in the '...'
// if called with 6 args from zmk_combo, then
//   FUNC is combo_6, and combo_4 and combo_5 are in the '...'
// the macro is replaced with FUNC
#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, _6, FUNC, ...) FUNC

#define ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, prior_idle) \
  / { \
    combos { \
      compatible = "zmk,combos"; \
      combo_ ## name { \
        bindings = <combo_bindings>; \
        key-positions = <keypos>; \
        layers = <combo_layers>; \
        timeout-ms = <combo_timeout>; \
        require-prior-idle-ms = <prior_idle>; \
      }; \
    }; \
  };

#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM_SLOW, COMBO_PRIOR_IDLE)

#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, COMBO_PRIOR_IDLE)

// var args gets spread here so the macro will be called with
// 4, 5 or 6 args plus the funcs, so 5 6 or 7 args total
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_6_ARGS, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)

/*
  ╭───────────────────────┬───────────────────────╮
  │                       |                       │
  │      LM3 LM2 LM1 TK3  |  RM1 RM2 RM3 RM4      │
  │                       │                       │
  ╰───────────╮       LH0 │ RK1       ╭───────────╯
              ╰───────────┴───────────╯    
*/

/***********************************************
*               0 LAYER COMBOS             *
************************************************/

//ZMK_COMBO(combo_a, &kp A, LIF, ALPHA, 200)
ZMK_COMBO(combo_b, &kp B, LMF LIF RIF, 0, 200)
ZMK_COMBO(combo_c, &kp C, LRF LMF RMF RRF, 0, 200)
ZMK_COMBO(combo_d, &kp D, LMF LIF RIF RMF, 0, 200)
//ZMK_COMBO(combo_e, &kp E, RIF, ALPHA, 200)
ZMK_COMBO(combo_f, &kp F, LMF LIF RIF, ALPHA, 200)
ZMK_COMBO(combo_g, &kp G, LIF RMF, ALPHA, 200)
ZMK_COMBO(combo_h, &kp H, LRF RRF, ALPHA, 200)
//ZMK_COMBO(combo_i, &kp I, RMF, ALPHA, 200)
ZMK_COMBO(combo_j, &kp J, LRF RIF RMF RRF, ALPHA, 200)
ZMK_COMBO(combo_k, &kp K, RIF RMF RRF, ALPHA, 200)
ZMK_COMBO(combo_l, &kp L, LRF LMF LIF, ALPHA, 200)
ZMK_COMBO(combo_m, &kp M, RMF RRF, ALPHA, 200)
ZMK_COMBO(combo_n, &kp N, LRF LMF, ALPHA, 200)
//ZMK_COMBO(combo_o, &kp O, LMF, ALPHA, 200)
ZMK_COMBO(combo_p, &kp P, LRF LMF LIF RIF, ALPHA, 200)
ZMK_COMBO(combo_q, &kp Q, LIF RIF RMF RRF, ALPHA, 200)
ZMK_COMBO(combo_r, &kp R, RIF RMF, ALPHA, 200)
ZMK_COMBO(combo_s, &kp S, LMF RMF, ALPHA, 200)
ZMK_COMBO(combo_t, &kp T, LIF RIF, ALPHA, 200)
//ZMK_COMBO(combo_u, &kp U, LMF, ALPHA, 200)
ZMK_COMBO(combo_v, &kp V, LIF RIF RMF, ALPHA, 200)
ZMK_COMBO(combo_w, &kp W, LRF LIF RIF RRF, ALPHA, 200)
ZMK_COMBO(combo_x, &kp X, LIF RRF, ALPHA, 200)
//ZMK_COMBO(combo_y, &kp Y, RRF, ALPHA, 200)
ZMK_COMBO(combo_z, &kp Z, LRF RIF, ALPHA, 200)


//ZMK_COMBO(combo_1, &kp 1, LIF, NUM, 200)
//ZMK_COMBO(combo_2, &kp 2, RIF, NUM, 200)
//ZMK_COMBO(combo_3, &kp 3, LMF, NUM, 200)
//ZMK_COMBO(combo_4, &kp 4, RMF, NUM, 200)
//ZMK_COMBO(combo_5, &kp 5, LRF, NUM, 200)
//ZMK_COMBO(combo_6, &kp 6, RRF, NUM, 200)
ZMK_COMBO(combo_seven, &kp N7, LMF LIF, NUM, 200)
ZMK_COMBO(combo_eight, &kp N8, RIF RMF, NUM, 200)
ZMK_COMBO(combo_nine, &kp N9, LIF RIF, NUM, 200)
ZMK_COMBO(combo_zero, &kp N0, LMF RMF, NUM, 200)


// ZMK_COMBO(combo_dot, &kp DOT, LIF, SYM, 200)
// ZMK_COMBO(combo_apostrophe, &kp APOSTROPHE, RIF, SYM, 200)
// ZMK_COMBO(combo_comma, &kp COMMA, LMF, SYM, 200)
// ZMK_COMBO(combo_equal, &kp EQUAL, RMF, SYM, 200)
ZMK_COMBO(combo_colon, &kp COLON, RIF RRF, SYM, 200)
ZMK_COMBO(combo_ampersands, &kp AMPERSAND, LIF RIF, SYM, 200)
ZMK_COMBO(combo_pipe, &kp PIPE, LMF RMF, SYM, 200)
ZMK_COMBO(combo_exclamation, &kp EXCLAMATION, LMF LIF RIF RMF, SYM, 200)
ZMK_COMBO(combo_question, &kp QUESTION, LRF LMF RMF RRF, SYM, 200)
ZMK_COMBO(combo_lparens, &kp LEFT_PARENTHESIS, LMF LIF, SYM, 200)
ZMK_COMBO(combo_rparens, &kp RIGHT_PARANTHESIS, RIF RMF, SYM, 200)
ZMK_COMBO(combo_lbrace, &kp LEFT_BRACE, LRF LMF LIF, SYM, 200)
ZMK_COMBO(combo_rbrace, &kp RIGHT_BRACE, RIF RMF RRF, SYM, 200)
ZMK_COMBO(combo_grave, &kp GRAVE, LMF LIF RIF, SYM, 200)
ZMK_COMBO(combo_lbracket, &kp LEFT_BRACKET, LRF LMF, SYM, 200)
ZMK_COMBO(combo_rbracket, &kp RIGHT_BRACKET, RMF RRF, SYM, 200)
// ZMK_COMBO(combo_less_than, &kp LESS_THAN, LRF, SYM, 200)
// ZMK_COMBO(combo_greater_than, &kp GREATER_THAN, RRF, SYM, 200)
ZMK_COMBO(combo_plus, &kp PLUS, LIF RIF RMF, SYM, 200)
ZMK_COMBO(combo_minus, &kp MINUS, LMF LIF RIF, SYM, 200)
ZMK_COMBO(combo_astrisk, &kp ASTRISK, LIF RMF, SYM, 200)
ZMK_COMBO(combo_slash, &kp SLASH, LMF RIF, SYM, 200)
ZMK_COMBO(combo_dollar, &kp DOLLAR, LRF LMF LIF RMF, SYM, 200)
ZMK_COMBO(combo_percent, &kp PERCENT, LMF RIF RMF RRF, SYM, 200)
ZMK_COMBO(combo_dqt, &kp DQT, LRF LIF, SYM, 200)
ZMK_COMBO(combo_caret, &kp CARET, RIF RRF, SYM, 200)
ZMK_COMBO(combo_semicolon, &kp SEMICOLON, LRF RIF RMF RRF, SYM, 200)
ZMK_COMBO(combo_backslash, &kp BACKSLASH, LRF LMF LIF RRF, SYM, 200)
ZMK_COMBO(combo_tilde, &kp TILDE, LRF LMF RMF, SYM, 200)
ZMK_COMBO(combo_at, &kp AT, LMF RMF RRF, SYM, 200)
ZMK_COMBO(combo_hash, &kp HASH, LRF LIF RIF RRF, SYM, 200)



//ZMK_COMBO(combo_left, &kp LEFT, RIF, NAV, 200)
//ZMK_COMBO(combo_up, &kp UP, RMF, NAV, 200)
//ZMK_COMBO(combo_right, &kp RIGHT, RRF, NAV, 200)
ZMK_COMBO(combo_down, &kp DOWN, RIF RMF, NAV, 200)
//ZMK_COMBO(combo_shif, &kp LSHIFT, LRF, NAV, 200)
//ZMK_COMBO(combo_gui, &kp LGUI, LMF, NAV, 200)
//ZMK_COMBO(combo_alt, &kp LALT, LIF, NAV, 200)
ZMK_COMBO(combo_ctrl, &kp LCTRL, LRF LMF, NAV, 200)

/***************  SHIFTED  ********************/

ZMK_COMBO(shift_a, &kp LS(A), LSH LIF, ALPHA, 500)
ZMK_COMBO(shift_b, &kp LS(B), LSH LIF RIF RMI, ALPHA, 500)
ZMK_COMBO(shift_c, &kp LS(C), LSH LMF RIF, ALPHA, 500)
ZMK_COMBO(shift_d, &kp LS(D), LSH LIF LMF, ALPHA, 500)
ZMK_COMBO(shift_e, &kp LS(E), LSH RIF, ALPHA, 500)
ZMK_COMBO(shift_f, &kp LS(F), LSH LIF LMF RIF, ALPHA, 500)
ZMK_COMBO(shift_g, &kp LS(G), LSH LMF RRF, ALPHA, 500)
ZMK_COMBO(shift_h, &kp LS(H), LSH LRF RMI, ALPHA, 500)
ZMK_COMBO(shift_i, &kp LS(I), LSH RMI, ALPHA, 500)
ZMK_COMBO(shift_j, &kp LS(J), LSH LRF RIF RMI, ALPHA, 500)
ZMK_COMBO(shift_k, &kp LS(K), LSH RRF RMI RIF, ALPHA, 500)
ZMK_COMBO(shift_l, &kp LS(L), LSH LIF RMI, ALPHA, 500)
ZMK_COMBO(shift_m, &kp LS(M), LSH LRF RIF, ALPHA, 500)
ZMK_COMBO(shift_n, &kp LS(N), LSH LMF RMI, ALPHA, 500)
ZMK_COMBO(shift_o, &kp LS(O), LSH LMF, ALPHA, 500)
ZMK_COMBO(shift_p, &kp LS(P), LSH LRF RRF, ALPHA, 500)
ZMK_COMBO(shift_q, &kp LS(Q), LSH LIF LMF RRF, ALPHA, 500)
ZMK_COMBO(shift_r, &kp LS(R), LSH LMF RIF RMI, ALPHA, 500) 
ZMK_COMBO(shift_s, &kp LS(S), LSH LIF RIF, ALPHA, 500) 
ZMK_COMBO(shift_t, &kp LS(T), LSH RIF RMI, ALPHA, 500)
ZMK_COMBO(shift_u, &kp LS(U), LSH LMF, ALPHA, 500)
ZMK_COMBO(shift_v, &kp LS(V), LSH LMF RIF RRF, ALPHA, 500)
ZMK_COMBO(shift_w, &kp LS(W), LSH LIF LMF RMI, ALPHA, 500)
ZMK_COMBO(shift_x, &kp LS(X), LSH RMI RRF, ALPHA, 500)
ZMK_COMBO(shift_y, &kp LS(Y), LSH RRF, ALPHA, 500)
ZMK_COMBO(shift_z, &kp LS(Z), LSH LMF LRF, ALPHA, 500)