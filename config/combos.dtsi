#define COMBO_TERM_FAST   18
#define COMBO_TERM_SLOW   50
#define COMBO_TERM_SLOWER 100
#define COMBO_PRIOR_IDLE  150


// sourced from urob/zmk-node-free
// if called with 4 args from zmk_combo, then
//   5 is combo_6, 6 is combo_5 and FUNC is combo_4
// if called with 5 args from zmk_combo, then
//   6 is combo_5, FUNC is combo_5, and combo_4 is in the '...'
// if called with 6 args from zmk_combo, then
//   FUNC is combo_6, and combo_4 and combo_5 are in the '...'
// the macro is replaced with FUNC
#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, _6, FUNC, ...) FUNC

#define ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, prior_idle) \
  / { \
    combos { \
      compatible = "zmk,combos"; \
      combo_ ## name { \
        bindings = <combo_bindings>; \
        key-positions = <keypos>; \
        layers = <combo_layers>; \
        timeout-ms = <combo_timeout>; \
        require-prior-idle-ms = <prior_idle>; \
      }; \
    }; \
  };

#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM_SLOW, COMBO_PRIOR_IDLE)

#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    ZMK_COMBO_6_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout, COMBO_PRIOR_IDLE)

// var args gets spread here so the macro will be called with
// 4, 5 or 6 args plus the funcs, so 5 6 or 7 args total
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_6_ARGS, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)

/*
  ╭───────────────────────┬───────────────────────╮
  │                       |                       │
  │      LM3 LM2 LM1 TK3  |  RM1 RM2 RM3 RM4      │
  │                       │                       │
  ╰───────────╮       LH0 │ RK1       ╭───────────╯
              ╰───────────┴───────────╯    
*/

/***********************************************
*               0 LAYER COMBOS             *
************************************************/

// ZMK_COMBO(chord_a, &kp A, LII, ALPHA, 500) // 'a' - Only RMI key needed
ZMK_COMBO(chord_b, &kp B, LII RII RMI, ALPHA, 500)
ZMK_COMBO(chord_c, &kp C, LMI RII, ALPHA, 500)
ZMK_COMBO(chord_d, &kp D, LII LMI, ALPHA, 500)
// ZMK_COMBO(chord_e, &kp E, RII, ALPHA, 500) // 'e' - Only ROI key needed
ZMK_COMBO(chord_f, &kp F, LII LMI RII, ALPHA, 500) // FAILED
ZMK_COMBO(chord_g, &kp G, LMI ROI, ALPHA, 500)
ZMK_COMBO(chord_h, &kp H, LOI RMI, ALPHA, 500)
// ZMK_COMBO(chord_i, &kp I, RMI, ALPHA, 500) // 'i' - Only LMI key needed
ZMK_COMBO(chord_j, &kp J, LOI RII RMI, ALPHA, 500) // FAILED
ZMK_COMBO(chord_k, &kp K, LOI LMI LII, ALPHA, 500) // FAILED
ZMK_COMBO(chord_l, &kp L, LII RMI, ALPHA, 500)
ZMK_COMBO(chord_m, &kp M, LOI RII, ALPHA, 500)
ZMK_COMBO(chord_n, &kp N, LMI RMI, ALPHA, 500)
// ZMK_COMBO(chord_o, &kp O, LMI, ALPHA, 500) // 'o' - Only LII key needed
ZMK_COMBO(chord_p, &kp P, LOI ROI, ALPHA, 500)
ZMK_COMBO(chord_q, &kp Q, LII LMI ROI, ALPHA, 500) // FAILED
ZMK_COMBO(chord_r, &kp R, LMI RII RMI, ALPHA, 500) // FAILED 
ZMK_COMBO(chord_s, &kp S, LII RII, ALPHA, 500) // FAILED
ZMK_COMBO(chord_t, &kp T, RII RMI, ALPHA, 500) // FAILED
// ZMK_COMBO(chord_u, &kp U, LMI, ALPHA, 500) // 'u' - Only LMI key needed
ZMK_COMBO(chord_v, &kp V, LMI RII ROI, ALPHA, 500) // FAILED
ZMK_COMBO(chord_w, &kp W, LII LMI RMI, ALPHA, 500) // FAILED
ZMK_COMBO(chord_x, &kp X, RMI ROI, ALPHA, 500) // FAILED
// ZMK_COMBO(chord_y, &kp Y, ROI, ALPHA, 500) // 'y' - Only ROI key needed
ZMK_COMBO(chord_z, &kp Z, LMI LOI, ALPHA, 500) // FAILED

/***************  SHIFTED  ********************/

ZMK_COMBO(shift_a, &kp LS(A), LSH LII, ALPHA, 500)
ZMK_COMBO(shift_b, &kp LS(B), LSH LII RII RMI, ALPHA, 500)
ZMK_COMBO(shift_c, &kp LS(C), LSH LMI RII, ALPHA, 500)
ZMK_COMBO(shift_d, &kp LS(D), LSH LII LMI, ALPHA, 500)
ZMK_COMBO(shift_e, &kp LS(E), LSH RII, ALPHA, 500)
ZMK_COMBO(shift_f, &kp LS(F), LSH LII LMI RII, ALPHA, 500)
ZMK_COMBO(shift_g, &kp LS(G), LSH LMI ROI, ALPHA, 500)
ZMK_COMBO(shift_h, &kp LS(H), LSH LOI RMI, ALPHA, 500)
ZMK_COMBO(shift_i, &kp LS(I), LSH RMI, ALPHA, 500)
ZMK_COMBO(shift_j, &kp LS(J), LSH LOI RII RMI, ALPHA, 500)
ZMK_COMBO(shift_k, &kp LS(K), LSH ROI RMI RII, ALPHA, 500)
ZMK_COMBO(shift_l, &kp LS(L), LSH LII RMI, ALPHA, 500)
ZMK_COMBO(shift_m, &kp LS(M), LSH LOI RII, ALPHA, 500)
ZMK_COMBO(shift_n, &kp LS(N), LSH LMI RMI, ALPHA, 500)
ZMK_COMBO(shift_o, &kp LS(O), LSH LMI, ALPHA, 500)
ZMK_COMBO(shift_p, &kp LS(P), LSH LOI ROI, ALPHA, 500)
ZMK_COMBO(shift_q, &kp LS(Q), LSH LII LMI ROI, ALPHA, 500)
ZMK_COMBO(shift_r, &kp LS(R), LSH LMI RII RMI, ALPHA, 500) 
ZMK_COMBO(shift_s, &kp LS(S), LSH LII RII, ALPHA, 500) 
ZMK_COMBO(shift_t, &kp LS(T), LSH RII RMI, ALPHA, 500)
ZMK_COMBO(shift_u, &kp LS(U), LSH LMI, ALPHA, 500)
ZMK_COMBO(shift_v, &kp LS(V), LSH LMI RII ROI, ALPHA, 500)
ZMK_COMBO(shift_w, &kp LS(W), LSH LII LMI RMI, ALPHA, 500)
ZMK_COMBO(shift_x, &kp LS(X), LSH RMI ROI, ALPHA, 500)
ZMK_COMBO(shift_y, &kp LS(Y), LSH ROI, ALPHA, 500)
ZMK_COMBO(shift_z, &kp LS(Z), LSH LMI LOI, ALPHA, 500)